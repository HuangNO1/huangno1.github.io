<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python - 標籤 - Rem Blog</title>
        <link>https://huangno1.github.io/tags/python/</link>
        <description>Python - 標籤 - Rem Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>fh831.cp9gw@gmail.com (Huang Po-Hsun)</managingEditor>
            <webMaster>fh831.cp9gw@gmail.com (Huang Po-Hsun)</webMaster><lastBuildDate>Thu, 30 Sep 2021 14:29:28 &#43;0800</lastBuildDate><atom:link href="https://huangno1.github.io/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>Ubuntu 中 Python2 升級到 Python3 &amp; pip 使用</title>
    <link>https://huangno1.github.io/ubuntu_upgrate_py2_to_py3/</link>
    <pubDate>Thu, 30 Sep 2021 14:29:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/ubuntu_upgrate_py2_to_py3/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/ubuntu_switch_network_interfaces_to_dhcp_or_static.jpg" referrerpolicy="no-referrer">
            </div>前言  ]]></description>
</item><item>
    <title>Python 爬蟲實戰教學 - Github 倉庫特徵爬取</title>
    <link>https://huangno1.github.io/python_spider_experience_instruct_github_repos/</link>
    <pubDate>Tue, 04 May 2021 08:03:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/python_spider_experience_instruct_github_repos/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/python_spider_experience_instruct_github_repos.jpg" referrerpolicy="no-referrer">
            </div>前言 因為這期學期上半我選了機器學習與數據挖掘，我在課程小組項目中負責了爬蟲這個部份，我會在這篇文章紀錄一下我的過程，並教導大家如何實戰 Python 爬蟲。
項目說明 我們這個小組項目的爬取需求是爬取 Github 項目的各個特徵，這篇文章會分兩個部份，第一個部份是使用 BeautifulSoup 爬取原生的 HTML 頁面，第二部份是使用 Github API，其中第二部份包含了每個倉庫的 Commits、pull_request 等月變化量(2020.03 ~2021.03)。
 P.S. 其實是我在剛開始寫爬蟲的時候，覺得 GIthub API 回傳的數據特徵有點少，所以就直接爬 Github 原生 HTML 頁面，沒有去爬月變化的數據，結果組長說要我重新去寫爬蟲，要爬月變化數據。
 開發前準備 安裝相關庫 因為我們需要使用到的庫有 BeautifulSoup 和 requests 等。所以有些需要自己去安裝，
1 2 3 4 5  import requests import time import csv import json from bs4 import BeautifulSoup   1  pip install requests BeautifulSoup   Github 私人 Token 因為我們需要爬取 Github 的網頁和使用 Github API，我們需要申請 Personal token，避免我們的請求達到 Rate Limit，Github 有限制一分鐘內的請求次數。]]></description>
</item><item>
    <title>部署 SpringBoot、Flask 與 Vue 前端與雙後端完全分離 Web 項目</title>
    <link>https://huangno1.github.io/deploy_springboot_flask_vue_web/</link>
    <pubDate>Mon, 21 Dec 2020 16:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/deploy_springboot_flask_vue_web/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/deploy_springboot_flask_vue_web.jpg" referrerpolicy="no-referrer">
            </div>前言 由於這學期我選修了軟件測試的課程，我們以十人小組為單位，對我在暑假實訓所參與的 MD-Blog 個人空間系統項目進行 Web 測試，過程中我將那個項目部署到了阿里雲的雲服務器上。這篇文章我紀錄一下我部署 Web 的過程。
購買服務器 因為我是用學生優惠等方式白嫖到了半年的阿里雲雲服務器，所以這方面其實沒怎麼出錢，幸好在軟件測試項目結題才到期，不過用學生優惠購買最低配的雲服務器，三個月也只需要 28 元人民幣，騰訊雲我因為過不了實名認證就算了（&hellip;這裡我要吐嘈一下連雲服務器都要實名認證）。
總之購買好雲服務器後新增好實例，通常我是建議使用 CentOS7 作為服務器的操作系統，進入雲服務器的控制台，你會看到服務器的公網 IP、私網 IP 和密碼，密碼可以重新修改。
這裡我們假設我們服務器的公網 IP 是 1.2.3.4。
部署項目前的工作 安裝環境 在配置之前我們需要將我們的 JDK、Python、MySQL、Nginx 在服務器端配置完畢。
JDK 注意：服務器安裝的 JDK 環境必須跟你的打包時使用的 JDK 版本一致，不然在運行後端 JAR 包時會報版本錯誤及不兼容的問題，要選擇 JDK1.8 以上的版本。
這裡是建議自己在本地下載好 JDK 然後 SCP 上傳至服務器端，選擇 Linux x64 Compressed Archive 下載，不要下錯成 Linux ARM 架構的（因為我下錯過，沒仔細看名稱），壓縮包名大致為 jdk-8u271-linux-x64.tar.gz。
 在用 SCP 上傳前要先進入服務器新增好資料夾，如果 SCP 上傳時指定到不存在的資料夾時，不會自動幫你新建一個新的資料夾。
 1 2 3 4 5 6 7 8 9 10 11 12  ssh root@1.]]></description>
</item><item>
    <title>Flask 跨域設置</title>
    <link>https://huangno1.github.io/flask_cors/</link>
    <pubDate>Wed, 05 Aug 2020 20:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_cors/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_cors.png" referrerpolicy="no-referrer">
            </div>前言 關於 Flask 跨域接收請求的設置真的蠻好配置的，我想並不難，但我還是稍微寫一下，避免新手不知道怎麼做。
安裝 跨域有 flask_cors 這個工具。
1  pip install flask_cors   配置 1 2 3 4 5 6 7 8 9  from flask import Flask, jsonify, request from flask_cors import CORS app = Flask(__name__) # enable CORS CORS(app) if __name__ == &#34;__main__&#34;: app.run(debug=True)   ]]></description>
</item><item>
    <title>Flask 中使用 JWT</title>
    <link>https://huangno1.github.io/flask_jwt/</link>
    <pubDate>Wed, 05 Aug 2020 13:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_jwt/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_jwt.png" referrerpolicy="no-referrer">
            </div>前言 因為我寫的上一篇文章是&quot;Flask 中使用 MySQL&quot;，文章內容有提及 JWT 的使用，這篇就是寫一下我在 JWT 上的使用。
Cookie Session  Cookie 和 LocalStorage 最大的區別是 Cookie 可以設置時效性，而LocalStorage 不行。
 在 JWT 授權認證技術還沒出來之前，我們是使用 Cookie 和 Session 來做驗證，分別是前端（Front End）和後端（Back End）的本地存儲。過程如下：
 JWT 理論部份 因為 Cookie Session 這種方式太過繁瑣，所以出來了 JWT 這樣的技術，原名 (JSON Web Tokens)，就是帶時效的 Token。主要差別是，Server 端不需要存 Session，大致情形如下：
 JWT 主要分為三段，個別為 header、payload 與 signature，中間以 . 做區隔，每一段都是透過 Base64Url 去編碼，中間的 payload 有時候會加密。
e.g.
1 2 3  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJlbWFpbCI6Imhpcm9AZ21haWwuY29tIn0. WAKjPd_0qcEG3dA9pEwAiw-0ADb8VwqFlSWiIYJTymo   header 存放 token 型別與加密方式 。]]></description>
</item><item>
    <title>Flask 中使用 MySQL</title>
    <link>https://huangno1.github.io/flask_mysql/</link>
    <pubDate>Tue, 04 Aug 2020 22:49:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/flask_mysql/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/flask_mysql.png" referrerpolicy="no-referrer">
            </div>前言 我一開始學 Flask 時是看 Flask 的官方教學學的，不得不說Flask 官方文檔寫得很好。因為 Flask 官方教學是使用 Sqlite 做為數據庫，但是我想要使用 MySQL，在自己網上搜索，加上自己的鑽研手做，這裡紀錄我摸索的結果。因為我偏好使用原生 SQL 語法，所以下面的數據庫操作都是原生語句，例子也是我之前做的某個項目裡面拿出來的。
安裝 1  pip install mysql-connector-python   引入、連接數據庫 因為是 MySQL，所以自己要在自己的電腦本地數據庫寫好要用的數據庫。下面的連接參數要自己改。
1 2 3 4 5 6 7 8 9 10 11 12 13  import mysql.connector from mysql.connector import Error # 連接 MySQL 資料庫 connection = mysql.connector.connect( host=&#39;localhost&#39;, # 主機名稱 database=&#39;myTelegram&#39;, # 資料庫名稱 user=&#39;Rem&#39;, # 帳號 password=&#39;&#39;) # 密碼 cursor = connection.cursor(buffered=True) cursor.execute(&#34;SELECT DATABASE();&#34;) record = cursor.]]></description>
</item><item>
    <title>Python 解決羅馬數字轉換 NPSC 模擬試題</title>
    <link>https://huangno1.github.io/python_rome_number_programming/</link>
    <pubDate>Thu, 30 Jul 2020 23:17:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/python_rome_number_programming/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/python_rome_number_programming.jpg" referrerpolicy="no-referrer">
            </div>前言 因為我家人正在學習寫 Python，我教導他去刷題庫，結果在高中生解題系統要解某個基礎題庫的題目時卡住了，我只好幫他解一下題目。
題目 這是高中生解題系統基礎題庫裡的 a013 題目
內容 如果生活在數世紀之前的古羅馬，你應該用過 V 來表示五。V 和 5 這兩個符號都可以用來表示數目五。用來表示數目的符號稱作數字。而羅馬人用來表示數目的符號就是羅馬數字。
以下是七個基本的羅馬數字︰
   羅馬數字 數目     I 1   V 5   X 10   L 50   C 100   D 500   M 1,000    所有其他的數目都是由這些數字組合而成。數目都是由左寫到右，通常值是等於組成的羅馬數字加起來。
例如十七可以表示為
1 2  X + V + I + I = XVII 10 + 5 + 1 + 1 = 17   表示羅馬數字可以使用減法來取代加法的規則。例如四可以不用四個一相加來表示 IIII，而採用五減一來表示 IV。利用這類規則，羅馬人能夠減化許多數目的表示方式，例如 IX 取代 VIIII 表示 9，及 CD 取代 CCCC 表示 400。]]></description>
</item><item>
    <title>在 Linux 上控制 Python 版本 - pyenv</title>
    <link>https://huangno1.github.io/linux_python_pyenv/</link>
    <pubDate>Mon, 27 Jan 2020 15:26:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huangno1.github.io/linux_python_pyenv/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featuredImage/compressed/linux_python_pyenv.png" referrerpolicy="no-referrer">
            </div>前言 在 Linux 開發 Python 相關的項目，你是不是會碰到關於 Python 版本之類的問題？像是開發 Tensorflow 的時候碰到版本問題，原本 Python 3.7 可以支援 Tensorflow，但是忽然 Python 從 3.7 更新到 3.8.0，這時 Python 3.8 不支援 Tensorflow，你苦惱了，千辛萬苦的項目因為系統更新而導致版本不支援使項目暫停開發，這時 pyenv 將成為你的救星，如果你硬是不肯更新系統 Python 版本，你的系統將會得不到最新的體驗與安全並處於危險的不穩定狀態，系統更新真的很重要。
pyenv 是很棒的 Python 版本控制工具，讓你的電腦可以安裝多個 Python 版本。pyenv 是 Github 上的開源項目，關於使用須知該項目的 README.md 寫得很詳細。我這篇文章就分享一下我在 Arch Linux 的安裝方式。
安裝 從 Github 倉庫上直接 clone 下來。你也可以選擇直接在瀏覽器上下來。然後壓縮包解壓將文件內的文件放入 ~/.pyenv。
 註：如果你在國內網使用 Github 網速過於緩慢，建議開 Proxy，然後給 Git 設置代理。
 設置代理 1 2 3 4 5 6 7 8 9 10  # set http git config --global http.]]></description>
</item></channel>
</rss>
